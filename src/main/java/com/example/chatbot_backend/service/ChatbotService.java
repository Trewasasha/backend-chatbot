package com.example.chatbot_backend.service;

import com.example.chatbot_backend.model.UserContactSession;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;

@Service
public class ChatbotService {

    private static final Pattern EMAIL_PATTERN = 
        Pattern.compile("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
    
    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥
    private static final Pattern PRICING_PATTERN = 
        Pattern.compile("(—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–ø—Ä–∞–π—Å|—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç|—Ü–µ–Ω[—ã—É]|price|cost|pricing)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern GREETING_PATTERN = 
        Pattern.compile("(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä(—ã–π|–æ–≥–æ)\\s(–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Ç—Ä–æ|–Ω–æ—á–∏)|hello|hi|—Ö–∞–π|–∑–¥—Ä–∞—Å—å—Ç–µ|–∑–¥–∞—Ä–æ–≤|–ø—Ä–∏–≤|–∑–¥–æ—Ä–æ–≤–æ|–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫|–∑–¥–æ—Ä–æ?–≤–æ)",
                Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern CONTACT_REQUEST_PATTERN = 
        Pattern.compile("(—Å–≤—è–∂[–∏—Ç–µ—Å—å]*|–∫–æ–Ω—Ç–∞–∫—Ç|–ø–µ—Ä–µ–∑–≤–æ–Ω[–∏—Ç–µ]*|—Å–≤—è–∑–∞—Ç—å—Å—è|—Å–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º|contact|—Å–≤—è–∑[—å–∏]|–Ω–∞–ø–∏—à–∏|–ø–æ–∑–≤–æ–Ω–∏)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern SPRING_PATTERN = 
        Pattern.compile("(spring|—Å–ø—Ä–∏–Ω–≥|spring[\\s-]*boot|—Å–ø—Ä–∏–Ω–≥[\\s-]*–±—É—Ç|—Ñ—Ä–µ–π–º–≤–æ—Ä–∫)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern POSTGRES_PATTERN = 
        Pattern.compile("(postgres|postgre\\s*sql|–ø–æ—Å—Ç–≥—Ä–µ—Å|–ø–æ—Å—Ç–≥—Ä–µ|–±–¥|–±–∞–∑–∞\\s*–¥–∞–Ω–Ω—ã—Ö|database)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern DOCKER_PATTERN = 
        Pattern.compile("(docker|–¥–æ–∫–µ—Ä|–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä|container)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern SERVICES_PATTERN = 
        Pattern.compile("(—É—Å–ª—É–≥[–∏–∞]|—Å–µ—Ä–≤–∏—Å|service|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫[–∞—É]|—Å–¥–µ–ª–∞—Ç—å|—Å–æ–∑–¥–∞—Ç—å|—Ä–∞–∑—Ä–∞–±–æ—Ç[–∞—É]|—Å–æ–∑–¥–∞–Ω–∏[–µ—é])", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern COLLABORATION_PATTERN = 
        Pattern.compile("(—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤[–æ–∞]|–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É|–ø—Ä–æ–µ–∫—Ç|–∑–∞–∫–∞–∑|collab|–∑–∞–∫–∞–∑–∞—Ç—å|—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å|—Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern THANKS_PATTERN = 
        Pattern.compile("(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|thanks|thank you|–º–µ—Ä—Å–∏|–æ—Ç –¥—É—à–∏)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    private static final Pattern BYE_PATTERN = 
        Pattern.compile("(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ –≤—Å—Ç—Ä–µ—á–∏|–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ|goodbye|bye|—á–∞–æ|–¥–æ –∑–∞–≤—Ç—Ä–∞)", 
            Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);

    private final TelegramService telegramService;
    private final Map<String, UserContactSession> contactSessions = new ConcurrentHashMap<>();

    public ChatbotService(TelegramService telegramService) {
        this.telegramService = telegramService;
    }

    public String processMessage(String sessionId, String message) {
        System.out.println("Processing message - Session: " + sessionId + ", Text: " + message);
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        if (sessionId != null && contactSessions.containsKey(sessionId)) {
            return processContactSession(sessionId, message.trim());
        }

        // 2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        String normalizedMsg = normalizeMessage(message);
        
        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∏
        if (CONTACT_REQUEST_PATTERN.matcher(normalizedMsg).find()) {
            contactSessions.put(sessionId, new UserContactSession());
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏:";
        }

        // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (normalizedMsg.length() < 2) {
            return getDefaultResponse();
        }

        // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        return handleRegularCommands(normalizedMsg);
    }

    private String processContactSession(String sessionId, String message) {
        UserContactSession session = contactSessions.get(sessionId);
        if (session == null) {
            contactSessions.remove(sessionId);
            return "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.";
        }

        if (session.isAwaitingEmail()) {
            if (!isValidEmail(message)) {
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: name@example.com\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email:";
            }
            session.setEmail(message);
            session.setAwaitingEmail(false);
            session.setAwaitingMessage(true);
            return "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:";
        }

        if (session.isAwaitingMessage()) {
            if (message.trim().isEmpty()) {
                return "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:";
            }
            
            String result = sendContactRequest(session, message);
            contactSessions.remove(sessionId);
            return result;
        }

        contactSessions.remove(sessionId);
        return "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.";
    }

    private String sendContactRequest(UserContactSession session, String message) {
        try {
            String telegramMsg = String.format(
                "üì© –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n\n" +
                "üìß Email: %s\n\n" +
                "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s\n\n" +
                "üïí –í—Ä–µ–º—è: %s",
                session.getEmail(),
                message,
                java.time.LocalDateTime.now()
            );
            
            telegramService.sendNotification(telegramMsg);
            return "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.";
        } catch (TelegramApiException e) {
            System.err.println("Telegram send error: " + e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private String normalizeMessage(String message) {
        return message.trim()
                     .replaceAll("[!?,.]", "")
                     .replaceAll("\\s+", " ")
                     .toLowerCase();
    }

    private boolean isValidEmail(String email) {
        return EMAIL_PATTERN.matcher(email).matches();
    }

    private String handleRegularCommands(String normalizedMsg) {
        if (GREETING_PATTERN.matcher(normalizedMsg).find()) {
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
        }
        
        if (THANKS_PATTERN.matcher(normalizedMsg).find()) {
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã.";
        }
        
        if (BYE_PATTERN.matcher(normalizedMsg).find()) {
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!";
        }
        
        if (PRICING_PATTERN.matcher(normalizedMsg).find()) {
            return getPricingInformation();
        }
        
        if (SPRING_PATTERN.matcher(normalizedMsg).find()) {
            return "–î–∞, Spring Boot - –º–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ backend-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.";
        }
        
        if (POSTGRES_PATTERN.matcher(normalizedMsg).find()) {
            return "–ò–º–µ—é –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å PostgreSQL, –≤–∫–ª—é—á–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏.";
        }
        
        if (DOCKER_PATTERN.matcher(normalizedMsg).find()) {
            return "–ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é Docker –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è Docker Compose –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.";
        }
        
        if (SERVICES_PATTERN.matcher(normalizedMsg).find()) {
            return "–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" +
                   "- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ REST API –Ω–∞ Spring Boot\n" +
                   "- –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n" +
                   "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö\n" +
                   "- Docker-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD";
        }
        
        if (COLLABORATION_PATTERN.matcher(normalizedMsg).find()) {
            return "–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–°–≤—è–∂–∏—Ç–µ –º–µ–Ω—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–∞–π—Ç–∞' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.";
        }
        
        return getDefaultResponse();
    }

    private String getPricingInformation() {
        return "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:\n\n" +
               "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ REST API - –æ—Ç 25 000 —Ä—É–±.\n" +
               "‚Ä¢ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –æ—Ç 50 000 —Ä—É–±.\n" +
               "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç 15 000 —Ä—É–±.\n" +
               "‚Ä¢ Docker-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ - –æ—Ç 10 000 —Ä—É–±.\n\n" +
               "–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.";
    }

    private String getDefaultResponse() {
        return "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n" +
               "üìå –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã: –Ω–∞–ø–∏—à–∏—Ç–µ '—Ü–µ–Ω—ã' –∏–ª–∏ '—Å—Ç–æ–∏–º–æ—Å—Ç—å'\n" +
               "üìå –û —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö: —Å–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ Spring, PostgreSQL –∏–ª–∏ Docker\n" +
               "üìå –°–≤—è–∑–∞—Ç—å—Å—è: –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π'\n" +
               "üìå –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç' –∏–ª–∏ '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'";
    }

    public String generateSessionId() {
        return UUID.randomUUID().toString();
    }
}